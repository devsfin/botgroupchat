import os
from telegram import Update, BotCommand, BotCommandScopeAllPrivateChats, BotCommandScopeChat
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler

TOKEN = os.getenv('BOTTOKEN')
if not TOKEN:
    raise ValueError("BOTTOKEN environment variable is not set.")

ADMIN_ID = 488787017
CONTACTS = {
    'ketr': 7415558897,
    'daruna': 7179688966,
}
GROUP_ID = -1003172613297
user_reports = {user_id: None for user_id in CONTACTS.values()}


# === –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
async def forward_to_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    text = update.message.text.strip()

    if text == '/contacts':
        contacts_list = "\n".join([f"/{name}" for name in CONTACTS.keys()])
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:\n{contacts_list}")
        return

    if text == '/check':
        await check_report(update, context)
        return

    if text.startswith('/'):
        cmd, *msg = text[1:].split(' ', 1)
        contact_id = CONTACTS.get(cmd)
        if contact_id:
            if msg:
                await context.bot.send_message(contact_id, msg[0])
            else:
                await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /{cmd}")
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.")
    else:
        for contact_id in CONTACTS.values():
            await context.bot.send_message(contact_id, text)


# === –ö–æ–º–∞–Ω–¥–∞ /balu –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def balu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if len(context.args) != 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ –∏–∑ 2 –∏–ª–∏ 3 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: /balu 45 –∏–ª–∏ /balu 123")
        return

    value = context.args[0]

    if not value.isdigit() or not (2 <= len(value) <= 3):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ –∏–∑ 2 –∏–ª–∏ 3 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: /balu 45 –∏–ª–∏ /balu 123")
        return

    number = int(value)
    user_reports[user_id] = number

    await update.message.reply_text(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ —á–∏—Å–ª–æ: {number}")

    report_msg = f"–û—Ç @{update.effective_user.username or update.effective_user.full_name} –ø–æ–ª—É—á–µ–Ω–æ —á–∏—Å–ª–æ: {number}"
    await context.bot.send_message(GROUP_ID, report_msg)


from datetime import datetime, time

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async def check_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    now = datetime.now().time()
    start_time = time(9, 15)   # 09:15 —É—Ç—Ä–∞
    end_time = time(3, 0)      # 03:00 –Ω–æ—á–∏

    def is_in_time_window(report_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞: report_time —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        if start_time <= report_time or report_time <= end_time:
            return True
        return False

    # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    missing = []
    received = []

    for name, uid in CONTACTS.items():
        report = user_reports.get(uid)
        if report is not None:
            report_time = report['time']  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ user_reports —Ö—Ä–∞–Ω–∏—Ç—Å—è {'nums': [...], 'time': datetime}
            if is_in_time_window(report_time.time()):
                received.append((name, report['nums']))
            else:
                missing.append(name)  # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω–æ –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
        else:
            missing.append(name)

    msg = "–û—Ç—á–µ—Ç –ø–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º:\n"
    if received:
        msg += "\n–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç:\n" + "\n".join([f"{name}: {nums}" for name, nums in received])
    else:
        msg += "\n–î–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–∏—Å–ª–∞—Ö –Ω–µ—Ç."

    if missing:
        msg += "\n\n–ù–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç:\n" + "\n".join(missing)
    else:
        msg += "\n\n–í—Å–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —á–∏—Å–ª–∞."

    await update.message.reply_text(msg)



# === –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –≤ –≥—Ä—É–ø–ø—É ===
async def forward_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id == ADMIN_ID:
        return

    caption = update.message.caption or update.message.text or ""
    header = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.full_name}:\n"

    try:
        if update.message.photo:
            await context.bot.send_photo(GROUP_ID, photo=update.message.photo[-1].file_id, caption=header + caption)
        elif update.message.document:
            await context.bot.send_document(GROUP_ID, document=update.message.document.file_id, caption=header + caption)
        elif update.message.video:
            await context.bot.send_video(GROUP_ID, video=update.message.video.file_id, caption=header + caption)
        elif update.message.voice:
            await context.bot.send_voice(GROUP_ID, voice=update.message.voice.file_id, caption=header + caption)
        elif update.message.audio:
            await context.bot.send_audio(GROUP_ID, audio=update.message.audio.file_id, caption=header + caption)
        elif update.message.sticker:
            await context.bot.send_sticker(GROUP_ID, sticker=update.message.sticker.file_id)
            await context.bot.send_message(GROUP_ID, header + "(—Å—Ç–∏–∫–µ—Ä)")
        elif caption:
            await context.bot.send_message(GROUP_ID, header + caption)
        else:
            await context.bot.send_message(GROUP_ID, header + "(—Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")

        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")


# === –†–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def set_bot_commands(application):
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_commands = [
        BotCommand("balu", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —á–∏—Å–ª–æ (2‚Äì3 —Ü–∏—Ñ—Ä—ã)")
    ]

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_commands = [
        BotCommand("balu", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —á–∏—Å–ª–æ (2‚Äì3 —Ü–∏—Ñ—Ä—ã)"),
        BotCommand("contacts", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"),
        BotCommand("check", "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —á–∏—Å–ª–∞–º")
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await application.bot.set_my_commands(user_commands, scope=BotCommandScopeAllPrivateChats())

    # –ê –∞–¥–º–∏–Ω—É ‚Äî –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã
    await application.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_ID))


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = ApplicationBuilder().token(TOKEN).build()
app.post_init = set_bot_commands

# –•–µ–Ω–¥–ª–µ—Ä—ã
app.add_handler(CommandHandler("balu", balu_command))
app.add_handler(CommandHandler("check", check_report))
app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), forward_to_contacts))
app.add_handler(MessageHandler(~filters.User(ADMIN_ID), forward_user_message))

if __name__ == "__main__":
    app.run_polling()
