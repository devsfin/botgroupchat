import os
from datetime import datetime, time
from telegram import Update, BotCommand, BotCommandScopeAllPrivateChats, BotCommandScopeChat
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
TOKEN = os.getenv('BOTTOKEN')
if not TOKEN:
    raise ValueError("BOTTOKEN environment variable is not set.")

ADMIN_ID = 488787017
CONTACTS = {
    'Luda': 1497126590,
    'Mama': 5110918542,
    'Slava': 394747876,
    'Anna': 405409720,
    'KetD': 616933881,
    'KetR': 1858219863,
    'Andre': 1614813445,
    'Vera': 5205993905,
    'Anton': 107042242,
    'Jeca': 91380845,
}
GROUP_ID = -1003172613297

# user_reports —Ç–µ–ø–µ—Ä –∑–±–µ—Ä—ñ–≥–∞ —Å–ª–æ–≤–Ω–∏–∫–∏: {"nums": —á–∏—Å–ª–æ, "time": datetime}
user_reports = {user_id: None for user_id in CONTACTS.values()}


# === –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞–¥–º—ñ–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∞–º ===
async def forward_to_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞.")
        return

    text = update.message.text.strip()

    if text == '/contacts':
        contacts_list = "\n".join([f"/{name}" for name in CONTACTS.keys()])
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:\n{contacts_list}")
        return

    if text == '/check':
        await check_report(update, context)
        return

    if text.startswith('/'):
        cmd, *msg = text[1:].split(' ', 1)
        contact_id = CONTACTS.get(cmd)
        if contact_id:
            if msg:
                await context.bot.send_message(contact_id, msg[0])
            else:
                await update.message.reply_text(f"–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /{cmd}")
        else:
            await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–Ω—Ç–∞–∫—Ç.")
    else:
        for contact_id in CONTACTS.values():
            await context.bot.send_message(contact_id, text)


# === –ö–æ–º–∞–Ω–¥–∞ /balu –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ===
async def balu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if len(context.args) != 1:
        await update.message.reply_text("–ë—É–¥—å–ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –æ–¥–Ω–µ —á–∏—Å–ª–æ –∑ 2 —á–∏ 3 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /balu 45 —á–∏ /balu 123")
        return

    value = context.args[0]

    if not value.isdigit() or not (2 <= len(value) <= 3):
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –æ–¥–Ω–µ —á–∏—Å–ª–æ –∑ 2 —á–∏ 3 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /balu 45 —á–∏ /balu 123")
        return

    number = int(value)
    # –ó–±–µ—Ä—ñ–≥–∞–µ–º —á–∏—Å–ª–æ —ñ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    user_reports[user_id] = {"nums": number, "time": datetime.now()}

    await update.message.reply_text(f"‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ —á–∏—Å–ª–æ: {number}")

    report_msg = f"–í—ñ–¥ @{update.effective_user.username or update.effective_user.full_name} –æ—Ç—Ä–∏–º–∞–Ω–æ —á–∏—Å–ª–æ: {number}"
    await context.bot.send_message(GROUP_ID, report_msg)


# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤—ñ—Ç—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞) ===
async def check_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞.")
        return

    start_time = time(9, 15)
    end_time = time(3, 0)  # 03:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è

    def is_in_time_window(report_time):
        return start_time <= report_time or report_time <= end_time

    missing = []
    received = []

    for name, uid in CONTACTS.items():
        report = user_reports.get(uid)
        if report is not None and isinstance(report, dict) and 'time' in report:
            report_time = report['time']
            if is_in_time_window(report_time.time()):
                received.append((name, report['nums']))
            else:
                missing.append(name)
        else:
            missing.append(name)

    msg = "–ó–≤—ñ—Ç –ø–æ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö —á–∏—Å–ª–∞—Ö:\n"
    if received:
        msg += "\n–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥:\n" + "\n".join([f"{name}: {nums}" for name, nums in received])
    else:
        msg += "\n–î–∞–Ω–Ω–∏—Ö –æ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö —á–∏—Å–ª–∞—Ö –Ω–µ–º–∞."

    if missing:
        msg += "\n\n–ù–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥:\n" + "\n".join(missing)
    else:
        msg += "\n\n–í—Å—ñ –ø—Ä–∏—Å–ª–∞–ª–∏ —á–∏—Å–ª–∞."

    await update.message.reply_text(msg)


# === –õ—é–±–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Üí –≤ –≥—Ä—É–ø–ø—É ===
async def forward_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id == ADMIN_ID:
        return

    caption = update.message.caption or update.message.text or ""
    header = f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{user.username or user.full_name}:\n"

    try:
        if update.message.photo:
            await context.bot.send_photo(GROUP_ID, photo=update.message.photo[-1].file_id, caption=header + caption)
        elif update.message.document:
            await context.bot.send_document(GROUP_ID, document=update.message.document.file_id, caption=header + caption)
        elif update.message.video:
            await context.bot.send_video(GROUP_ID, video=update.message.video.file_id, caption=header + caption)
        elif update.message.voice:
            await context.bot.send_voice(GROUP_ID, voice=update.message.voice.file_id, caption=header + caption)
        elif update.message.audio:
            await context.bot.send_audio(GROUP_ID, audio=update.message.audio.file_id, caption=header + caption)
        elif update.message.sticker:
            await context.bot.send_sticker(GROUP_ID, sticker=update.message.sticker.file_id)
            await context.bot.send_message(GROUP_ID, header + "(—Å—Ç–∏–∫–µ—Ä)")
        elif caption:
            await context.bot.send_message(GROUP_ID, header + caption)
        else:
            await context.bot.send_message(GROUP_ID, header + "(–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–µ–∫—Å—Ç—É)")

        await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—ñ: {e}")


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ===
async def set_bot_commands(application):
    user_commands = [BotCommand("balu", "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –æ–¥–Ω–µ —á–∏—Å–ª–æ (2‚Äì3 —Ü–∏—Ñ—Ä–∏)")]
    admin_commands = [
        BotCommand("balu", "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –æ–¥–Ω–µ —á–∏—Å–ª–æ (2‚Äì3 —Ü–∏—Ñ—Ä–∏)"),
        BotCommand("contacts", "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"),
        BotCommand("check", "–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–≤—ñ—Ç –ø–æ —á–∏—Å–ª–∞–º")
    ]

    await application.bot.set_my_commands(user_commands, scope=BotCommandScopeAllPrivateChats())
    await application.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_ID))


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = ApplicationBuilder().token(TOKEN).build()
app.post_init = set_bot_commands

# –•–µ–Ω–¥–ª–µ—Ä—ã
app.add_handler(CommandHandler("balu", balu_command))
app.add_handler(CommandHandler("check", check_report))
app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), forward_to_contacts))
app.add_handler(MessageHandler(~filters.User(ADMIN_ID), forward_user_message))

if __name__ == "__main__":
    print("Bot is running...")
    app.run_polling()
